include!("stdlib");
include!("aoc.zote");

input := read("input");
lines := input >> split("\n");

cache := dict();
fn arrangements(springs, groups) -> {
	dfs(springs, 0, groups, 0)
}

fn dfs(springs, ss, groups, gs) -> {
	key := [ss, gs];
	if key >> in(cache) return cache[key];

	if gs == len(groups) {
		for spring in springs[ss:] {
			if spring == "#" return cache[key] = 0;
		}
		return cache[key] =  1;
	}

	ways := 0;
	gsize := groups[gs];

	while ss + gsize <= len(springs) {
		// We can either take a step or use the group

		// use the group
		{
			// See that the one after the group is not #, and that we don't use . as bad
			if !(ss + gsize < len(springs) and springs[ss+gsize] == "#") and all(springs[ss:ss+gsize], \>> neq(".")) 
				ways += dfs(springs, ss + gsize + 1, groups, gs + 1);
		}

		// Take another, and test again
		{
			if springs[ss] == '#' break;
			ss += 1;
		}
	}

	cache[key] = ways
}

// Part 1
{
	tot := 0;
	for line in lines {
		(springs, groups) := line >> split(" ");
		groups = groups >> split(",") >> map(int);

		cache = dict();
		tot += arrangements(springs, groups);
	}
	print(tot);
}

// Part 2
{
	tot := 0;
	for line in lines {
		(springs, groups) := line >> split(" ");
		springs = springs ++ "?" ++ springs ++ "?" ++ springs ++ "?" ++ springs ++ "?" ++ springs;
		groups = groups ++ "," ++ groups ++ "," ++ groups ++ "," ++ groups ++ "," ++ groups;
		groups = groups >> split(",") >> map(int);

		cache = dict();
		tot += arrangements(springs, groups); 
	}
	print(tot);
}

