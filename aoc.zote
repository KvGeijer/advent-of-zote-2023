// File with helper functions for advent of code

/// Checks if a value is between two others (inclusive)
fn in_range(val, from, to) -> from <= val and val <= to;

/// Returns true if a char is between "0" and "9"
///
/// Will give strange results if now used on a string.
/// Crashes if multiple chars
fn is_digit(char) -> {
	1 = len(char);
	char >> in_range("0", "9")

}

/// Extracts all integers from a string
fn ints(string) -> {
	nbr := nil;
	neg := false;
	ints := [];
	for char in string if char >> is_digit {
		if nbr == nil nbr = 0;
		nbr = 10*nbr + int(char)
	} else if nbr != nil {
		(if neg (-nbr) else nbr) >> push(ints);
		nbr = nil;
		neg = false;
	} else {
		neg = char == '-';
	}
	
	if nbr != nil (if neg (-nbr) else nbr) >> push(ints);

	ints
}

/// Extracts all integers from a string, with their start and end indexes
fn indexed_ints(string) -> {
	(nbr, start, end) := [0, 0, 0];
	ints := [];
	for (ind, char) in string >> enumerate if char >> is_digit {
		if nbr == 0 start = ind;
		end = ind;

		nbr = 10*nbr + int(char)
	} else if nbr != 0 {
		[nbr, start, end] >> push(ints);
		nbr = 0;
	}

	if nbr != 0 [nbr, start, end] >> push(ints);
	

	ints
}

/// Stores al chars string into a dict such that dict[[x, y]] = split(string, "\n")[x][y]
fn parse_matrix_dict(string, dict) -> {
	// TODO: For this to be useful, we need default_dict
	for (row, line) in string >> split("\n") >> enumerate
		for (col, char) in line >> enumerate
			dict[[row, col]] = char;
}

/// Flattens a list of lists to one list
fn concat(coll) -> {
	res := [];
	for value in coll {
		res = res ++ value;
	}
	res
}

vsub := \(r1, c1), (r2, c2) -> [r1 - r2, c1 - c2];
vadd := \(r1, c1), (r2, c2) -> [r1 + r2, c1 + c2];

/// Computes 4 neighbors of a 2d coordinate
fn neighs4((x, y)) -> [[x+1, y], [x-1, y], [x, y+1], [x, y-1]];

/// Computes 5 neighbors of a 2d coordinate
fn neighs5((x, y)) -> [[x+1, y], [x-1, y], [x, y+1], [x, y-1], [x, y]];

/// Computes 8 neighbors of a 2d coordinate
fn neighs8((x, y)) -> [[x+1, y], [x-1, y], [x, y+1], [x, y-1], [x+1, y+1], [x+1, y-1], [x-1, y+1], [x-1, y-1]];

/// Computes 9 neighbors of a 2d coordinate
fn neighs9((x, y)) -> [[x+1, y], [x-1, y], [x, y+1], [x, y-1], [x+1, y+1], [x+1, y-1], [x-1, y+1], [x-1, y-1], [x, y]];

/// Counts the occurrence of every item in an iterable
fn count(items) -> {
	counter := dict();
	for item in items {
		if !in(item, counter) counter[item] = 1
		else counter[item] += 1;
	}
	counter
}


/// Parse a hex-string as an integer
fn parse_hex(str) -> {
	s := 0;
	for c in str {
		s = 16*s + if is_digit(c) int(c)
		else to_ascii(c) - to_ascii("a") + 10;
	};
	s
}

/// Shoelace to find area within polygon
///
/// It counts all edges as fully filled, so adds edges/2 + 1 to area in polygon
fn shoelace_grid(coords, edges) -> {
	n := len(coords);
	area := 0;
	for i in [0:n] {
		j := (i + 1) % n;
		area += coords[i][0] * coords[j][1];
		area -= coords[j][0] * coords[i][1];
	}
	// This is the area within the polygon
	within := abs(area)/2;

	// Here we add things to also count the edge cells as their whole.
	// On average every edge cell will be 1/2 full, as we have a loop.
	// Except that we will make one full revolution, so we add a 1, as we will have 4 cells 1/4 filled
	within + edges/2 + 1
}


