include!("stdlib");
include!("aoc.zote");

input := read("input") >> trim;
(rules, parts) := input >> split('\n\n') >> map(\>> split("\n"));

// Parse the input
rdict := dict();
for rule in rules {
	(name, rest) := rule >> split('{');
	rest := rest[:-1];
	parts := rest >> split(",");

	paths := [];
	for part in parts[:-1] {
		(r, to) := part >> split(':');
		[part[0], if part[1] == '>' gt else lt, int(r[2:]), to] >> push(paths);
	}

	rdict[name] = [paths, parts[-1]];
}

// Part 1
fn valid(part, wf) -> {
	if wf == "A" return sum(part >> values) else if wf == "R" return 0;

	(paths, def) := rdict[wf];

	for (t, op, cmp, to) in paths {
		if part[t] >> op(cmp) return valid(part, to);
	}
	valid(part, def)
}

parts 
	>> map(\>> ints >> zip('xmas') >> map(rev) >> dict >> valid('in')) 
	>> sum 
	>> print;

// Part 2
fn possibilities(poss, wf) -> {
	if wf == "A" return poss >> values >> map(len) >> prod else if wf == "R" return 0;

	tot := 0;
	(paths, def) := rdict[wf];

	for (t, op, cmp, to) in paths {
		p2 := poss >> clone;
		p2[t] = p2[t] >> filter(\>> op(cmp));
		poss[t] = poss[t] >> filter(\>> op(cmp) >> not);
		tot += possibilities(p2, to);
	}
	
	tot + possibilities(poss, def)
}

'xmas' 
	>> map(\c -> [c, [1:4001]]) 
	>> dict 
	>> possibilities('in') 
	>> print;
