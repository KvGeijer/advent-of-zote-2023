include!("stdlib");
include!("aoc.zote");

sections := read("input") >> split("\n\n");

seeds := sections[0] >> ints;
maps := sections[1:] >> map(\>> split("\n") >> [1:] >> map(ints));

fn find_overlap(from, to, section) -> {
	lowest := nil;
	lowest_stop := nil;
	lowest_offset := nil;

	for (dest, origin, len) in section {
		if (from < origin + len) // from is within the range
			and (to > origin)// to is not past the range
		{
			if lowest == nil or origin < lowest {
				// Found a new best transform
				lowest = max(from, origin);
				lowest_stop = min(to, origin + len - 1);
				lowest_offset = dest - origin;
			}
		}
	} 

	[lowest, lowest_stop, lowest_offset]	
}

for ranges in [seeds >> zip(seeds),
			   seeds[0::2] >> zip(seeds[1::2]) >> map(\(from, len) -> [from, from + len -1])] {

	// Do one transform at a time to all ranges
	for transform in maps {
		new_ranges := [];
		for (from, to) in ranges {
			while from <= to {
				(start, stop, offset) := find_overlap(from, to, transform);

				if start != nil {
					// We have found an overlap
					if start > from {
						// Does not ovelap completely
						[from + offset, start - 1 + offset] >> push(new_ranges);
						from = start;
					}

					[start + offset, stop + offset] >> push(new_ranges);
					from = stop + 1;
				} else {
					// Cannot find an overlap, just continue
					[from, to] >> push(new_ranges);
					break;
				}
			}
		}
		ranges = new_ranges;
	}

	ranges >> map(\>> [0]) >> minimum >> print;
}

