include!("stdlib");
include!("aoc.zote");

patterns := read("input") 
	>> split("\n\n") 
	>> map(\>> split("\n"));

fn solve(pattern, normal_points) -> {
	ncols := len(pattern[0]);
	nrows := len(pattern);

	// Rows: list for each row, with all indexes of #
	rows := [0:nrows] >> map(\>> const([]));
	cols := [0:ncols] >> map(\>> const([]));

	for (row, line) in pattern >> enumerate for (col, char) in line >> enumerate if char == '#' {
		col >> push(rows[row]);
		row >> push(cols[col]);
	}

	for col in [1:ncols] if normal_points != col 
		if zip(cols[:col] >> rev, cols[col:]) >> all(\(l, r) -> l == r) 
			return col;

	for row in [1:nrows] if normal_points != row*100 
		if zip(rows[:row] >> rev, rows[row:]) >> all(\(l, r) -> l == r) 
			return row*100;
}

fn solve2(pattern, normal) -> {
	for (row, line) in pattern >> enumerate for (col, char) in line >> enumerate  {
		pattern[row][col] = if char == "#" "." else "#";

		mod := solve(pattern, normal);
		if mod != nil return mod;

		pattern[row][col] = char;
	}
}

part1 := 0;
part2 := 0;
for (pi, pattern) in patterns >> enumerate {

	normal := solve(pattern, nil);
	part1 += normal;

	part2 += solve2(pattern, normal);
}

print(part1);
print(part2);
