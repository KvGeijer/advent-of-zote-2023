include!("stdlib");
include!("aoc.zote");

input := read("input") >> trim;
lines := input >> split("\n");

rows := len(lines);
cols := len(lines[0]);

start := [0, 1];
end := [rows - 1, cols -2];

fn ok((row, col)) -> row >= 0 and row < rows and col >= 0 and col < cols and lines[row][col] != '#'; 

// Reduce the graph!!
vertices := set();
start >> insert(vertices);
end >> insert(vertices);
for (row, line) in lines >> enumerate for (col, c) in line >> enumerate {
	n := 0;
	if c != '#' for neigh in neighs4([row, col]) if ok(neigh) n += 1;
	if n > 2 [row, col] >> insert(vertices);
}

// Now connect them!
fn connect(pos, vs, vis) -> {
	pos >> insert(vis);
	steps := len(vis);
	for neigh in neighs4(pos) if ok(neigh) and !in(neigh, vis) {
		if in(neigh, vertices) {
			// This is a direct connecttion
			if steps > get_or(neigh, vs, 0) vs[neigh] = steps;
		} else {
			connect(neigh, vs, clone(vis));
		}
	};
}

conns := dict();
for vert in vertices >> keys {
	d := dict();
	connect(vert, d, set());
	conns[vert] = list(d);
}

// Naive (and very slow) dfs over reduced graph
fn dfs(pos, vis, d) -> {
	if !ok(pos) return 0;
	pos >> insert(vis);

	if pos[0] == rows - 1 return d;

	best := 0;
	for (neigh, dist) in conns[pos] if !in(neigh, vis) {
		best = max(dfs(neigh, clone(vis), d + dist), best);				
	}
	best
}

dfs(start, set(), 0) >> print;
