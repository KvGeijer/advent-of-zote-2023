include!("stdlib");
include!("aoc.zote");

fn to_card(char, part2) -> 
	match char {
		'A' -> 14,
		'K' -> 13,
		'Q' -> 12,
		'J' -> if part2 (-1) else 11,
		'T' -> 10,
		char -> int(char),
	}

fn power(hand) -> {
	cd := hand 
		>> map(\card -> [card, hand >> filter(\>> eq(card)) >> len])
		>> dict;

	joker := if -1 >> in(cd) cd[-1] else 0;
	counts := cd >> list >> filter(\(k, v) -> k != -1) >> map(\>> [1]) >> sort;

	if joker == 5 or counts[-1] + joker == 5 6
	else if counts[-1] + joker == 4 5
	else if len(counts) == 2 4
	else if counts[-1] + joker == 3 3
	else if len(counts) < 4 2
	else if counts[-1] + joker == 2 1
	else  0
}

fn rank(hand1, hand2) -> {
	(p1, p2) := [power(hand1), power(hand2)];
	if p1 > p2 
		1
	else if p2 > p1 
		(-1) // TODO: Annoying that we need some encapsulation for -1, as it will otherwise bind as p1 - 1
	else for (c1, c2) in zip(hand1, hand2) 
		if c1 > c2 
			return 1
		else if c2 > c1
			return -1
}

for part2 in [false, true] 
	read("input")
		>> split("\n") 
		>> map(\>> split(" ") >> (\(k, v) -> [map(k, \>> to_card(part2)), v])) 
		>> sort(\(hand1, _), (hand2, _) -> rank(hand1, hand2)) 
		>> enumerate 
		>> map(\(ind, (_, bid)) -> int(bid)*(ind+1)) 
		>> sum 
		>> print;





