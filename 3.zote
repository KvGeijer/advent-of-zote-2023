include!("stdlib");
include!("aoc.zote");

input := read("input");
lines := read("input") >> split("\n");

char_dict := dict();
parse_matrix_dict(input, char_dict);

gear_dict := dict();
for ((row, col), char) in char_dict if char == "*" {
	gear_dict[[row, col]] = [];
}

fn is_surr(start, end, line_ind) -> {
	for col in [start-1: end +2] for row in [line_ind-1, line_ind, line_ind +1] 
		if [row, col] >> in(char_dict) {
			d := char_dict[[row, col]];
			if d != "." and !is_digit(d) return true;
		}
	false
}

// [[val, row, col-start, col-end]]
indexed_ints := input 
	>> split("\n") 
	>> map(indexed_ints)
	>> enumerate
	>> map(\(row, indexed) -> indexed >> map(\(val, start, end) -> [val, row, start, end]))
	>> concat;

indexed_ints
	>> map(\(val, row, col_start, col_end) -> if is_surr(col_start, col_end, row) val else 0)
	>> sum
	>> print;

for (val, row, col_start, col_end) in indexed_ints 
	for col in [col_start-1: col_end +2] for row in [row-1:row+2] 
		if [row, col] >> in(gear_dict)
			val >> push(gear_dict[[row, col]]);

gear_dict
	>> values
	>> filter(\val -> len(val) > 1)
	>> map(prod)
	>> sum
	>> print;
